/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_io.h"

volatile unsigned int* peripherals_pr2mb 	= (unsigned int*) XPAR_AXI_GPIO_PERIPHERALS_BASEADDR;
volatile unsigned int* peripherals_mb2pr 	= (unsigned int*) (XPAR_AXI_GPIO_PERIPHERALS_BASEADDR + 0x8);

#define FINAL_FSM

/* USER CONTROLS */
#define MODE_HOMESCREEN 0
#define MODE_EARTRAINING 1
#define MODE_FREEPLAY 2

#define CTRL_NOP 0
#define CTRL_GOHOME 1
#define CTRL_GOEARTRAIN 2
#define CTRL_GOFREEPLAY 3
#define CTRL_PLAYCHORD 4
#define CTRL_PIANOINPUT 5
#define CTRL_ETENTER 6

#define GET_USER_CONTROLS(value)    ( (value)       & 0xF )
#define GET_PIANO_NOTE_ID(value)    (((value) >> 4) & 0x7F)

#define SET_MODE_SEL(value)       (((value) & 0x3)  << 0)
#define SET_PLAY_NOTE_NUM(value)  (((value) & 0x3)  << 2)
#define SET_PLAY_NOTE_ID0(value)  (((value) & 0x7F) << 4)
#define SET_PLAY_NOTE_ID1(value)  (((value) & 0x7F) << 11)
#define SET_PLAY_NOTE_ID2(value)  (((value) & 0x7F) << 18)
#define SET_SUNG_NOTE_ID(value)   (((value) & 0x3F) << 25)
#define SET_COMPARE_CORRECT(value) (((value) & 0x1) << 31)

#define GENERATE_SWCTRL_PIANO_OUT(mode, num, id0, id1, id2, sung, cmp) (\
    SET_MODE_SEL(mode) | \
    SET_PLAY_NOTE_NUM(num) | \
    SET_PLAY_NOTE_ID0(id0) | \
    SET_PLAY_NOTE_ID1(id1) | \
    SET_PLAY_NOTE_ID2(id2) | \
    SET_SUNG_NOTE_ID(sung) | \
    SET_COMPARE_CORRECT(cmp) )

// Pseudorandom Number Generator
unsigned int get_random_U32_number(u32 *seed) {
    u32 Number = *seed;
    Number ^= Number << 13;
    Number ^= Number >> 17;
    Number ^= Number << 5;
    *seed = Number;
    return Number;
}

int main()
{
    init_platform();

    print("WELCOME TO PITCH TRAINING DEVICE\n\r");

// Encode / Decode

    // simulated microblaze (SW) -> Microblaze
    //    	wire [3:0] playen_oct_oct_oct   = SW[15:12];
    //      wire simulated_cmp              = SW[11];
    // 		wire [3:0] microblaze_sung_note = SW[9:6];
    //    	wire [3:0] generated_note0      = SW[5:2];   // 0 C, 11 B
    //    	wire [1:0] simulated_mode_sel   = SW[1:0];
//    uint32_t microblazesim_in;
    uint8_t playen_oct_oct_oct, simulated_cmp, microblaze_sung_note, generated_note0, simulated_mode_sel;

    // microblaze <- peripheral
    // 		AXI_GPIO outputs [microblaze <- module]
    //    	    // bit 0
    //    	    wire [3:0] user_controls;   // 16 controls bits available for keyboard software controls
    //    	    wire [6:0] piano_note_id;   // piano note most recently played
    //    	    // bit 11
    uint32_t swctrl_piano_in;
    uint8_t piano_note_id;
    uint8_t user_controls;

    // microblaze -> peripheral
    // 		AXI_GPIO inputs [microblaze -> module]
    //    	    // bit 0
    //    	    wire [1:0] mode_sel;        // 0 Home, 1 Ear Training, 2 Free Play
    //    	    wire [1:0] play_note_num;   // microblaze generates chord, max 3 notes
    //    	    wire [6:0] play_note_id_0;  // microblaze chord note 0
    //    	    wire [6:0] play_note_id_1;  // microblaze chord note 1
    //    	    wire [6:0] play_note_id_2;  // microblaze chord note 2
    //    	    wire [5:0] sung_note_id;    // user sung note
    //    	    wire compare_correct;
    //    	    // bit 31
    uint32_t swctrl_piano_out;
    uint8_t compare_correct, sung_note_id, play_note_id2, play_note_id1, play_note_id0, play_note_num, mode_sel;

    uint8_t mode = 0;
    uint8_t microblaze_cmp_note;
    u32 seed_var;
    u32 *seed = &seed_var;

    // Ear Training Mode Variables
    int numNotes;
    u32 randNoteArray[3] = {0, 0, 0};
    u32 userInputs[3] = {0, 0, 0};
    int matches = 0;
    uint8_t allMatch = 0;
    uint8_t et_cont = 0;

    /* Program FSM */
    seed = *peripherals_pr2mb;

    while (1) {
        if (mode == MODE_HOMESCREEN) {
            xil_printf("\nMODE: HOME SCREEN ------\n");
            xil_printf("    Press [1] Ear Training, [2] Free Play\n");

            // clean state
            swctrl_piano_out = GENERATE_SWCTRL_PIANO_OUT(
                mode,
                0, 0, 0, 0,
                0, 0);
            *peripherals_mb2pr = swctrl_piano_out;

            // poll user mode change
            while (mode == MODE_HOMESCREEN) {
                user_controls = GET_USER_CONTROLS(*peripherals_pr2mb);
                if (user_controls == CTRL_GOEARTRAIN) {
                    mode = MODE_EARTRAINING;
                    // xil_printf("MODE CHANGE: EAR TRAINING -----\n");
                    swctrl_piano_out = GENERATE_SWCTRL_PIANO_OUT(
                        mode,
                        numNotes, randNoteArray[0], randNoteArray[1], randNoteArray[2],
                        sung_note_id, compare_correct);
                    *peripherals_mb2pr = swctrl_piano_out;

                } else if (user_controls == CTRL_GOFREEPLAY) {
                    mode = MODE_FREEPLAY;
                    // xil_printf("MODE CHANGE: FREE PLAY --------\n");
                    swctrl_piano_out = GENERATE_SWCTRL_PIANO_OUT(
                        mode,
                        numNotes, randNoteArray[0], randNoteArray[1], randNoteArray[2],
                        sung_note_id, compare_correct);
                    *peripherals_mb2pr = swctrl_piano_out;
                }
            }
        }
        else if (mode == MODE_EARTRAINING) {
            xil_printf("MODE: EAR TRAINING -----\n");

            // clean state
            swctrl_piano_out = GENERATE_SWCTRL_PIANO_OUT(
                mode,
                0, 0, 0, 0,
                0, 0);
            *peripherals_mb2pr = swctrl_piano_out;
            numNotes = 0;
            sung_note_id = 0;

            // reset arrays
            for (int i = 0; i < 3; i++) {
                randNoteArray[i] = 0;
                userInputs[i] = 0;
            }


            // Gen rand num of notes
            // make deterministic
            numNotes = 1;

            // Generate N different random notes
            for (int i = 0; i < numNotes; i++) {
    			randNoteArray[i] = get_random_U32_number(seed)%12 + 33;
    			if (i != 0){
    				for (int j = 0; j < i; j++) {
    					while (randNoteArray[i] == randNoteArray[j]) {
    						randNoteArray[i] = get_random_U32_number(seed)%12 + 33;
    					}
    				}
    			}
    		}
            xil_printf("    Generated %d random notes\n", numNotes);

            // Send generated chord to Peripherals
            swctrl_piano_out = GENERATE_SWCTRL_PIANO_OUT(
                mode,
                numNotes, randNoteArray[0], randNoteArray[1], randNoteArray[2],
                0, 0);
            *peripherals_mb2pr = swctrl_piano_out;

            // User Answer Logic
            if (numNotes == 1) {
                do { // Answer 1
                    swctrl_piano_in = *peripherals_pr2mb;
                    user_controls = GET_USER_CONTROLS(swctrl_piano_in);
                    piano_note_id = GET_PIANO_NOTE_ID(swctrl_piano_in);
                    if (user_controls == CTRL_PIANOINPUT) {
                        xil_printf("    >> piano1 %d <<\n", piano_note_id);
                        userInputs[0] = piano_note_id;
                    }
                } while (userInputs[0] == 0); // Ensure input is different
            }
            else if (numNotes == 2) {
                do { // Answer 1
                    swctrl_piano_in = *peripherals_pr2mb;
                    user_controls = GET_USER_CONTROLS(swctrl_piano_in);
                    piano_note_id = GET_PIANO_NOTE_ID(swctrl_piano_in);
                    if (user_controls == CTRL_PIANOINPUT) {
                        xil_printf("    >> piano1 %d <<\n", piano_note_id);
                        userInputs[0] = piano_note_id;
                    }
                } while (userInputs[0] == 0); // Ensure input is different

                do { // Answer 2
                    swctrl_piano_in = *peripherals_pr2mb;
                    user_controls = GET_USER_CONTROLS(swctrl_piano_in);
                    piano_note_id = GET_PIANO_NOTE_ID(swctrl_piano_in);
                    if (user_controls == CTRL_PIANOINPUT) {
                        xil_printf("    >> piano2 %d <<\n", piano_note_id);
                        userInputs[1] = piano_note_id;
                    }
                } while ((userInputs[1] == 0) | (userInputs[1] == userInputs[0])); // Ensure input is different
            }
            else if (numNotes == 3) {
                do { // Answer 1
                    swctrl_piano_in = *peripherals_pr2mb;
                    user_controls = GET_USER_CONTROLS(swctrl_piano_in);
                    piano_note_id = GET_PIANO_NOTE_ID(swctrl_piano_in);
                    if (user_controls == CTRL_PIANOINPUT) {
                        xil_printf("    >> piano1 %d <<\n", piano_note_id);
                        userInputs[0] = piano_note_id;
                    }
                } while (userInputs[0] == 0); // Ensure input is different

                do { // Answer 2
                    swctrl_piano_in = peripherals_pr2mb;
                    user_controls = GET_USER_CONTROLS(swctrl_piano_in);
                    piano_note_id = GET_PIANO_NOTE_ID(swctrl_piano_in);
                    if (user_controls == CTRL_PIANOINPUT) {
                        xil_printf("    >> piano2 %d <<\n", piano_note_id);
                        userInputs[1] = piano_note_id;
                    }
                } while ((userInputs[1] == 0) | (userInputs[1] == userInputs[0])); // Ensure input is different

                do { // Answer 3
                    swctrl_piano_in = peripherals_pr2mb;
                    user_controls = GET_USER_CONTROLS(swctrl_piano_in);
                    piano_note_id = GET_PIANO_NOTE_ID(swctrl_piano_in);
                    if (user_controls == CTRL_PIANOINPUT) {
                        xil_printf("    >> piano3 %d <<\n", piano_note_id);
                        userInputs[2] = piano_note_id;
                    }
                } while ((userInputs[2] == 0) | (userInputs[2] == userInputs[0]) | (userInputs[2] == userInputs[1])); // Ensure input is different
            }

            xil_printf("    done inputing answers, comparing...\n");

            // Compare Answers
            for (int x = 0; x < numNotes; x++) {
                for (int y = 0; y < numNotes; y++) {
                    if (userInputs[x] == randNoteArray[y]) {
                        matches++;
                        break;
                    }
                }
            }
            allMatch = (matches==numNotes) ? 1 : 0;  // True if all match

            xil_printf("    > Answer key:    %d, %d, %d\n", randNoteArray[0], randNoteArray[1], randNoteArray[2]);
            xil_printf("    > User Answered: %d, %d, %d\n", userInputs[0], userInputs[1], userInputs[2]);
            xil_printf("    Press [Enter] next round, [Q] Quit\n");

            // display comparison on peripheral
            swctrl_piano_out = GENERATE_SWCTRL_PIANO_OUT(
                mode,
                numNotes, randNoteArray[0], randNoteArray[1], randNoteArray[2],
                0, allMatch);
            *peripherals_mb2pr = swctrl_piano_out;

            // wait for enter key, or quit
            et_cont = 0;
            while (!et_cont) {
                swctrl_piano_in = *peripherals_pr2mb;
                user_controls = GET_USER_CONTROLS(swctrl_piano_in);
                if (user_controls == CTRL_ETENTER) {
                    xil_printf("    >> continue <<\n", piano_note_id);
                    et_cont = 1;
                    // logic will naturally enter the next iteration and generate new notes
                } else if (user_controls == CTRL_GOHOME) {
                    xil_printf("    >> quit <<\n", piano_note_id);
                    et_cont = 1;
                    mode = MODE_HOMESCREEN;
                }
            }

        }
        else if (mode == MODE_FREEPLAY) {
            xil_printf("MODE: FREE PLAY --------\n");

            // clean state
            swctrl_piano_out = GENERATE_SWCTRL_PIANO_OUT(
                mode,
                0, 0, 0, 0,
                0, 0);
            *peripherals_mb2pr = swctrl_piano_out;

            sung_note_id = 0;
            compare_correct = 0;

            while (mode == MODE_FREEPLAY) {
                swctrl_piano_in = *peripherals_pr2mb;
                user_controls = GET_USER_CONTROLS(swctrl_piano_in);
                piano_note_id = GET_PIANO_NOTE_ID(swctrl_piano_in);

                // TEMP: user sung note
//				microblazesim_in = *microblazesim;
//				microblaze_sung_note = (microblazesim_in >> 6)  & 0xF;
                microblaze_sung_note = 0;
				sung_note_id 	= microblaze_sung_note + 33;
				swctrl_piano_out = GENERATE_SWCTRL_PIANO_OUT(
				                        mode,
				                        numNotes, 0, 0, 0,
				                        sung_note_id, compare_correct);
				*peripherals_mb2pr = swctrl_piano_out;

                if (user_controls == CTRL_GOHOME) {
                    mode = MODE_HOMESCREEN;
                    xil_printf("    >> quit <<\n", piano_note_id);

                } else if (user_controls == CTRL_PIANOINPUT) {

                    xil_printf("    >> sung %d, piano %d <<\n", sung_note_id, piano_note_id);
                    compare_correct = (piano_note_id == sung_note_id);

                    swctrl_piano_out = GENERATE_SWCTRL_PIANO_OUT(
                        mode,
                        0, 0, 0, 0,
                        sung_note_id, compare_correct);
                    *peripherals_mb2pr = swctrl_piano_out;
                }
            }

        }
    }

    cleanup_platform();
    return 0;
}
